{"mappings":"gfAaA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAbMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAetB,SAAsBC,GACpBA,EAAEC,iBAUF,IATA,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAIvBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEvBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrC1B,EAAc0B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE9D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE9DmB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["//Напиши скрипт, который при сабмите формы вызывает функцию\n//createPromise(position, delay) столько раз, сколько ввели в поле amount.\n//При каждом вызове передай ей номер создаваемого промиса(position)\n//и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n//Дополни код функции createPromise так, чтобы она возвращала один промис,\n//который выполянется или отклоняется через delay времени.\n//Значением промиса должен быть объект, в котором будут свойства position и\n//delay со значениями одноименных параметров.\n//Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n//Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  //троки конвертируем в числа\n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n  let amountValue = Number(amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    firstDelay += delayStep;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","firstDelay","Number","value","delayStep","amountValue","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.a3bf21bf.js.map"}